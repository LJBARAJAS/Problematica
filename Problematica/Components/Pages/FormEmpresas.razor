@page "/Empresa/nueva"
@page "/Empresa/editar/{Id:int}"
@rendermode InteractiveServer
@using Problematica.Components.Data
@inject NavigationManager _navigationManager
@inject IRepositorioEmpresa _repositorioempresa


<PageTitle>@_empresa</PageTitle>
<h3>@_mensaje Empresa</h3>

<EditForm Model="_empresa" FormName="frmEmpresa" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="mb-3 row">
		<label for="txtNombre" class="col-sm-2 col-form-label">Nombre</label>
		<div class="col-sm-10">
			<InputText @bind-Value="_empresa.Nombre" class="form-control" id="txtNombre" />
			<ValidationMessage For="()=>_empresa.Nombre" />
		</div>
	</div>

	<div class="mb-3 row">
		<label for="txtNumDeSucursal" class="col-sm-2 col-form-label">Numero de Sucursal</label>
		<div class="col-sm-10">
			<InputNumber @bind-Value="_empresa.NumDeSucursal" class="form-control" id="txtNumDeSucursal" />
			<ValidationMessage For="()=>_empresa.NumDeSucursal" />
		</div>
	</div>
	<button type="submit" class="btn btn-primary">Guardar</button>
	<button class="btn btn-danger ms-3" @onclick="Cancelar" @onclick:preventDefault>Cancelar</button>
</EditForm>

@code {
	[Parameter]
	public int Id { get; set; }
	private Components.Data.Empresa? _empresa = new();
	private string _mensaje = "Nueva";
	private List<Empresa> _empresas = new();

	protected override async Task OnInitializedAsync()
	{
		if (Id > 0)
		{
			_mensaje = "Editar ";
			_empresa = await _repositorioempresa.Get(Id);
		}
	}

	private void Cancelar()
	{
		_navigationManager.NavigateTo("/Empresas");
	}

	private async Task Guardar()
	{

		if (_empresa?.Id > 0)
		{
			await _repositorioempresa.Update(_empresa);
		}
		else
		{
			await _repositorioempresa.Add(_empresa!);
		}
		Cancelar();
	}
}
